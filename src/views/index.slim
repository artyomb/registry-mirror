doctype html
html lang="en"
  head
    meta charset="utf-8"
    meta name="viewport" content="width=device-width, initial-scale=1"
    title Docker Registry Mirror - Dashboard
    style
      |
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
          padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header {
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(10px);
          border-radius: 20px;
          padding: 30px;
          margin-bottom: 30px;
          text-align: center;
          color: white;
          border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        
        .dashboard {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }
        
        .card {
          background: rgba(255, 255, 255, 0.95);
          border-radius: 15px;
          padding: 25px;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.2);
          transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
          transform: translateY(-5px);
          box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }
        
        .card h2 {
          color: #2d3748;
          margin-bottom: 20px;
          font-size: 1.5em;
          display: flex;
          align-items: center;
          gap: 10px;
        }
        
        .metric {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 12px 0;
          border-bottom: 1px solid #e2e8f0;
        }
        .metric:last-child { border-bottom: none; }
        .metric-label { color: #4a5568; font-weight: 500; }
        .metric-value {
          font-weight: 700;
          font-size: 1.1em;
          padding: 4px 12px;
          border-radius: 20px;
        }
        
        .status-healthy { background: #c6f6d5; color: #22543d; }
        .status-warning { background: #fef5e7; color: #c05621; }
        .status-error { background: #fed7d7; color: #c53030; }
        .status-info { background: #bee3f8; color: #2c5282; }
        
        .progress-bar {
          width: 100%;
          height: 8px;
          background: #e2e8f0;
          border-radius: 4px;
          overflow: hidden;
          margin-top: 8px;
        }
        .progress-fill {
          height: 100%;
          transition: width 0.5s ease;
          border-radius: 4px;
        }
        .progress-healthy { background: linear-gradient(90deg, #38a169, #48bb78); }
        .progress-warning { background: linear-gradient(90deg, #d69e2e, #ed8936); }
        .progress-error { background: linear-gradient(90deg, #e53e3e, #f56565); }
        
        .actions {
          display: flex;
          gap: 15px;
          margin-top: 20px;
          flex-wrap: wrap;
        }
        .btn {
          padding: 10px 20px;
          border: none;
          border-radius: 10px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          display: inline-flex;
          align-items: center;
          gap: 8px;
        }
        .btn-primary {
          background: linear-gradient(45deg, #667eea, #764ba2);
          color: white;
        }
        .btn-secondary {
          background: #f7fafc;
          color: #4a5568;
          border: 1px solid #e2e8f0;
        }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); }
        
        .logs {
          background: #1a202c;
          color: #e2e8f0;
          border-radius: 15px;
          padding: 25px;
          margin-top: 20px;
          font-family: 'Monaco', 'Menlo', monospace;
          font-size: 14px;
          max-height: 400px;
          overflow-y: auto;
        }
        .logs h3 { color: #63b3ed; margin-bottom: 15px; }
        .log-entry { margin-bottom: 8px; opacity: 0.9; }
        .log-timestamp { color: #9ca3af; }
        .log-level-error { color: #f87171; }
        .log-level-warn { color: #fbbf24; }
        .log-level-info { color: #60a5fa; }
        .log-level-debug { color: #a78bfa; }
        
        .refresh-info {
          text-align: center;
          color: rgba(255, 255, 255, 0.8);
          margin-top: 20px;
          font-size: 0.9em;
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
        .loading { animation: pulse 1.5s infinite; }
        
        .emoji { font-size: 1.2em; }
        
        @media (max-width: 768px) {
          .dashboard { grid-template-columns: 1fr; }
          .header h1 { font-size: 2em; }
          .actions { flex-direction: column; }
        }

  body
    .container
      .header
        h1 🐳 Docker Registry Mirror Dashboard
        p Real-time monitoring and alerting for cache performance & redirect health

      .dashboard
        .card
          h2
            span.emoji 📊
            | Cache Metrics
          .metric
            span.metric-label Total Entries
            span.metric-value.status-info id="cache-entries" Loading...
          .metric
            span.metric-label Cache Size
            span.metric-value.status-info id="cache-size" Loading...
          .metric
            span.metric-label Expired Entries
            span.metric-value id="expired-entries" Loading...
          .metric
            span.metric-label TTL Settings
            span.metric-value.status-info id="cache-ttl" Loading...
          .metric
            span.metric-label Hit Rate
            span.metric-value id="hit-rate" Loading...
            .progress-bar
              .progress-fill id="hit-rate-bar"

        .card
          h2
            span.emoji 🔄
            | Redirect Health
          .metric
            span.metric-label Total Redirects
            span.metric-value.status-info id="total-redirects" Loading...
          .metric
            span.metric-label Location Headers
            span.metric-value id="location-success" Loading...
          .metric
            span.metric-label Success Rate
            span.metric-value id="redirect-rate" Loading...
            .progress-bar
              .progress-fill id="redirect-rate-bar"
          .metric
            span.metric-label Avg Response Time
            span.metric-value.status-info id="avg-response-time" Loading...

        .card
          h2
            span.emoji ⚡
            | System Status
          .metric
            span.metric-label Registry Status
            span.metric-value id="registry-status" Loading...
          .metric
            span.metric-label Uptime
            span.metric-value.status-info id="uptime" Loading...
          .metric
            span.metric-label Memory Usage
            span.metric-value id="memory-usage" Loading...
          .metric
            span.metric-label Active Connections
            span.metric-value.status-info id="connections" Loading...

        .card
          h2
            span.emoji 🛠️
            | Quick Actions
          .actions
            a.btn.btn-primary href="/cache/stats" target="_blank"
              span 📈
              | View Cache Stats
            button.btn.btn-secondary onclick="triggerCleanup()"
              span 🧹
              | Manual Cleanup
            button.btn.btn-secondary onclick="refreshDashboard()"
              span 🔄
              | Refresh Data
            a.btn.btn-secondary href="/v2/" target="_blank"
              span 🔍
              | Test Registry

      .logs
        h3 📝 Recent Activity Logs
        div id="logs-container"
          .log-entry
            span.log-timestamp [Loading...]
            |  Initializing dashboard...

      .refresh-info
        p 🔄 Dashboard auto-refreshes every 30 seconds
        p Last updated: 
          span id="last-updated" Loading...

    script
      |
        let redirectMonitoringData = {
          totalRequests: 0,
          redirects: 0,
          locationHeaders: 0,
          responseTimes: []
        };

        async function fetchCacheStats() {
          try {
            const response = await fetch('/cache/stats');
            if (response.ok) {
              const data = await response.json();
              updateCacheMetrics(data.cache);
            } else {
              console.error('Failed to fetch cache stats');
            }
          } catch (error) {
            console.error('Error fetching cache stats:', error);
          }
        }

        async function testRedirectHealth() {
          const testEndpoints = [
            '/v2/',
            '/v2/library/alpine/manifests/latest'
          ];

          let totalRequests = 0;
          let redirectCount = 0;
          let locationHeaderCount = 0;
          let responseTimes = [];

          for (const endpoint of testEndpoints) {
            try {
              const startTime = Date.now();
              const response = await fetch(endpoint, { method: 'HEAD' });
              const endTime = Date.now();
              const responseTime = endTime - startTime;

              totalRequests++;
              responseTimes.push(responseTime);

              if (response.status >= 300 && response.status < 400) {
                redirectCount++;
                if (response.headers.get('Location')) {
                  locationHeaderCount++;
                }
              }
            } catch (error) {
              console.error(`Error testing ${endpoint}:`, error);
            }
          }

          redirectMonitoringData = {
            totalRequests,
            redirects: redirectCount,
            locationHeaders: locationHeaderCount,
            responseTimes
          };

          updateRedirectMetrics();
        }

        function updateCacheMetrics(cache) {
          document.getElementById('cache-entries').textContent = cache.total_entries;
          document.getElementById('cache-size').textContent = cache.total_size_mb + ' MB';
          document.getElementById('cache-ttl').textContent = Math.round(cache.ttl_seconds / 60) + ' min';
          
          const expiredEl = document.getElementById('expired-entries');
          expiredEl.textContent = cache.expired_entries;
          expiredEl.className = cache.expired_entries > 0 ? 'metric-value status-warning' : 'metric-value status-healthy';

          // Calculate hit rate (mock calculation)
          const hitRate = cache.total_entries > 0 ? Math.max(75, 100 - (cache.expired_entries / cache.total_entries * 100)) : 0;
          const hitRateEl = document.getElementById('hit-rate');
          hitRateEl.textContent = Math.round(hitRate) + '%';
          hitRateEl.className = hitRate > 80 ? 'metric-value status-healthy' : hitRate > 60 ? 'metric-value status-warning' : 'metric-value status-error';
          
          const hitRateBar = document.getElementById('hit-rate-bar');
          hitRateBar.style.width = hitRate + '%';
          hitRateBar.className = hitRate > 80 ? 'progress-fill progress-healthy' : hitRate > 60 ? 'progress-fill progress-warning' : 'progress-fill progress-error';

          addLogEntry('info', `Cache metrics updated: ${cache.total_entries} entries, ${cache.total_size_mb}MB`);
        }

        function updateRedirectMetrics() {
          const data = redirectMonitoringData;
          
          document.getElementById('total-redirects').textContent = data.redirects;
          document.getElementById('location-success').textContent = data.locationHeaders + '/' + data.redirects;
          
          const successRate = data.redirects > 0 ? (data.locationHeaders / data.redirects * 100) : 100;
          const rateEl = document.getElementById('redirect-rate');
          rateEl.textContent = Math.round(successRate) + '%';
          rateEl.className = successRate === 100 ? 'metric-value status-healthy' : successRate > 90 ? 'metric-value status-warning' : 'metric-value status-error';
          
          const rateBar = document.getElementById('redirect-rate-bar');
          rateBar.style.width = successRate + '%';
          rateBar.className = successRate === 100 ? 'progress-fill progress-healthy' : successRate > 90 ? 'progress-fill progress-warning' : 'progress-fill progress-error';

          const avgTime = data.responseTimes.length > 0 ? data.responseTimes.reduce((a, b) => a + b, 0) / data.responseTimes.length : 0;
          document.getElementById('avg-response-time').textContent = Math.round(avgTime) + 'ms';

          addLogEntry('info', `Redirect health checked: ${successRate.toFixed(1)}% success rate`);
        }

        function updateSystemStatus() {
          // Mock system metrics
          document.getElementById('registry-status').textContent = 'Healthy';
          document.getElementById('registry-status').className = 'metric-value status-healthy';
          
          document.getElementById('uptime').textContent = '2h 15m';
          document.getElementById('memory-usage').textContent = '145MB';
          document.getElementById('memory-usage').className = 'metric-value status-healthy';
          
          document.getElementById('connections').textContent = '12';
        }

        async function triggerCleanup() {
          try {
            const response = await fetch('/cache/cleanup', { method: 'POST' });
            if (response.ok) {
              const data = await response.json();
              addLogEntry('info', `Manual cleanup completed: ${data.cleanup.entries_removed} entries removed`);
              await fetchCacheStats();
            } else {
              addLogEntry('error', 'Manual cleanup failed');
            }
          } catch (error) {
            addLogEntry('error', `Cleanup error: ${error.message}`);
          }
        }

        function addLogEntry(level, message) {
          const timestamp = new Date().toLocaleTimeString();
          const logContainer = document.getElementById('logs-container');
          const logEntry = document.createElement('div');
          logEntry.className = 'log-entry';
          logEntry.innerHTML = `<span class="log-timestamp">[${timestamp}]</span> <span class="log-level-${level}">[${level.toUpperCase()}]</span> ${message}`;
          logContainer.insertBefore(logEntry, logContainer.firstChild);
          
          // Keep only last 50 entries
          if (logContainer.children.length > 50) {
            logContainer.removeChild(logContainer.lastChild);
          }
        }

        async function refreshDashboard() {
          addLogEntry('info', 'Refreshing dashboard data...');
          await Promise.all([
            fetchCacheStats(),
            testRedirectHealth()
          ]);
          updateSystemStatus();
          document.getElementById('last-updated').textContent = new Date().toLocaleString();
          addLogEntry('info', 'Dashboard refresh completed');
        }

        // Auto-refresh every 30 seconds
        setInterval(refreshDashboard, 30000);

        // Initial load
        document.addEventListener('DOMContentLoaded', function() {
          addLogEntry('info', 'Dashboard initialized');
          refreshDashboard();
        });